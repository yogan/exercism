%% Generated with 'testgen v0.2.0'
%% Revision 1 of the exercises generator was used
%% https://github.com/exercism/problem-specifications/raw/42dd0cea20498fd544b152c4e2c0a419bb7e266a/exercises/all-your-base/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(all_your_base_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").


'1_single_bit_one_to_decimal_test_'() ->
    {"single bit one to decimal",
     ?_assertMatch({ok, [1]},
		   all_your_base:rebase([1], 2, 10))}.

'2_binary_to_single_decimal_test_'() ->
    {"binary to single decimal",
     ?_assertMatch({ok, [5]},
		   all_your_base:rebase([1, 0, 1], 2, 10))}.

'3_single_decimal_to_binary_test_'() ->
    {"single decimal to binary",
     ?_assertMatch({ok, [1, 0, 1]},
		   all_your_base:rebase([5], 10, 2))}.

'4_binary_to_multiple_decimal_test_'() ->
    {"binary to multiple decimal",
     ?_assertMatch({ok, [4, 2]},
		   all_your_base:rebase([1, 0, 1, 0, 1, 0], 2, 10))}.

'5_decimal_to_binary_test_'() ->
    {"decimal to binary",
     ?_assertMatch({ok, [1, 0, 1, 0, 1, 0]},
		   all_your_base:rebase([4, 2], 10, 2))}.

'6_trinary_to_hexadecimal_test_'() ->
    {"trinary to hexadecimal",
     ?_assertMatch({ok, [2, 10]},
		   all_your_base:rebase([1, 1, 2, 0], 3, 16))}.

'7_hexadecimal_to_trinary_test_'() ->
    {"hexadecimal to trinary",
     ?_assertMatch({ok, [1, 1, 2, 0]},
		   all_your_base:rebase([2, 10], 16, 3))}.

'8_15_bit_integer_test_'() ->
    {"15-bit integer",
     ?_assertMatch({ok, [6, 10, 45]},
		   all_your_base:rebase([3, 46, 60], 97, 73))}.

'9_empty_list_test_'() ->
    {"empty list",
     ?_assertMatch({ok, [0]},
		   all_your_base:rebase([], 2, 10))}.

'10_single_zero_test_'() ->
    {"single zero",
     ?_assertMatch({ok, [0]},
		   all_your_base:rebase([0], 10, 2))}.

'11_multiple_zeros_test_'() ->
    {"multiple zeros",
     ?_assertMatch({ok, [0]},
		   all_your_base:rebase([0, 0, 0], 10, 2))}.

'12_leading_zeros_test_'() ->
    {"leading zeros",
     ?_assertMatch({ok, [4, 2]},
		   all_your_base:rebase([0, 6, 0], 7, 10))}.

'13_input_base_is_one_test_'() ->
    {"input base is one",
     ?_assertMatch({error, "input base must be >= 2"},
		   all_your_base:rebase([0], 1, 10))}.

'14_input_base_is_zero_test_'() ->
    {"input base is zero",
     ?_assertMatch({error, "input base must be >= 2"},
		   all_your_base:rebase([], 0, 10))}.

'15_input_base_is_negative_test_'() ->
    {"input base is negative",
     ?_assertMatch({error, "input base must be >= 2"},
		   all_your_base:rebase([1], -2, 10))}.

'16_negative_digit_test_'() ->
    {"negative digit",
     ?_assertMatch({error,
		    "all digits must satisfy 0 <= d < input "
		    "base"},
		   all_your_base:rebase([1, -1, 1, 0, 1, 0], 2, 10))}.

'17_invalid_positive_digit_test_'() ->
    {"invalid positive digit",
     ?_assertMatch({error,
		    "all digits must satisfy 0 <= d < input "
		    "base"},
		   all_your_base:rebase([1, 2, 1, 0, 1, 0], 2, 10))}.

'18_output_base_is_one_test_'() ->
    {"output base is one",
     ?_assertMatch({error, "output base must be >= 2"},
		   all_your_base:rebase([1, 0, 1, 0, 1, 0], 2, 1))}.

'19_output_base_is_zero_test_'() ->
    {"output base is zero",
     ?_assertMatch({error, "output base must be >= 2"},
		   all_your_base:rebase([7], 10, 0))}.

'20_output_base_is_negative_test_'() ->
    {"output base is negative",
     ?_assertMatch({error, "output base must be >= 2"},
		   all_your_base:rebase([1], 2, -7))}.

'21_both_bases_are_negative_test_'() ->
    {"both bases are negative",
     ?_assertMatch({error, "input base must be >= 2"},
		   all_your_base:rebase([1], -2, -7))}.
